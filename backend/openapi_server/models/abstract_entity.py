from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class AbstractEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, created_at=None, updated_at=None):  # noqa: E501
        """AbstractEntity - a model defined in OpenAPI

        :param id: The id of this AbstractEntity.  # noqa: E501
        :type id: int
        :param created_at: The created_at of this AbstractEntity.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this AbstractEntity.  # noqa: E501
        :type updated_at: datetime
        """
        self.openapi_types = {
            'id': int,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt'
        }

        self._id = id
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'AbstractEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AbstractEntity of this AbstractEntity.  # noqa: E501
        :rtype: AbstractEntity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this AbstractEntity.


        :return: The id of this AbstractEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this AbstractEntity.


        :param id: The id of this AbstractEntity.
        :type id: int
        """

        self._id = id

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this AbstractEntity.


        :return: The created_at of this AbstractEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this AbstractEntity.


        :param created_at: The created_at of this AbstractEntity.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this AbstractEntity.


        :return: The updated_at of this AbstractEntity.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this AbstractEntity.


        :param updated_at: The updated_at of this AbstractEntity.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
