"""Autogenerated SQLAlchemy models based on OpenAlchemy models."""
# pylint: disable=no-member,super-init-not-called,unused-argument

import datetime
import typing

import sqlalchemy
from sqlalchemy import orm

from open_alchemy import models

Base = models.Base  # type: ignore


class AbstractEntityDict(typing.TypedDict, total=True):
    """TypedDict for properties that are required."""

    id: int
    createdAt: str
    updatedAt: str


class TAbstractEntity(typing.Protocol):
    """
    SQLAlchemy model protocol.

    Attrs:
        id: The id of the AbstractEntity.
        createdAt: The createdAt of the AbstractEntity.
        updatedAt: The updatedAt of the AbstractEntity.

    """

    # SQLAlchemy properties
    __table__: sqlalchemy.Table
    __tablename__: str
    query: orm.Query

    # Model properties
    id: 'sqlalchemy.Column[int]'
    createdAt: 'sqlalchemy.Column[datetime.datetime]'
    updatedAt: 'sqlalchemy.Column[datetime.datetime]'

    def __init__(self, id: int, createdAt: datetime.datetime, updatedAt: datetime.datetime) -> None:
        """
        Construct.

        Args:
            id: The id of the AbstractEntity.
            createdAt: The createdAt of the AbstractEntity.
            updatedAt: The updatedAt of the AbstractEntity.

        """
        ...

    @classmethod
    def from_dict(cls, id: int, createdAt: datetime.datetime, updatedAt: datetime.datetime) -> "TAbstractEntity":
        """
        Construct from a dictionary (eg. a POST payload).

        Args:
            id: The id of the AbstractEntity.
            createdAt: The createdAt of the AbstractEntity.
            updatedAt: The updatedAt of the AbstractEntity.

        Returns:
            Model instance based on the dictionary.

        """
        ...

    @classmethod
    def from_str(cls, value: str) -> "TAbstractEntity":
        """
        Construct from a JSON string (eg. a POST payload).

        Returns:
            Model instance based on the JSON string.

        """
        ...

    def to_dict(self) -> AbstractEntityDict:
        """
        Convert to a dictionary (eg. to send back for a GET request).

        Returns:
            Dictionary based on the model instance.

        """
        ...

    def to_str(self) -> str:
        """
        Convert to a JSON string (eg. to send back for a GET request).

        Returns:
            JSON string based on the model instance.

        """
        ...


AbstractEntity: typing.Type[TAbstractEntity] = models.AbstractEntity  # type: ignore
